#ifndef _LIST_H
#define _LIST_H
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#define MAX 50
typedef struct item 
{
    char name [MAX];
    char phone [MAX];
} Item;
typedef struct node 
{
    Item item;
    struct node * next;
    struct node * prev;
} Node;
typedef struct list
{
    Node * head;
    Node * tail;
    unsigned int size;
} List;
/*Операция: инициализация списка пустым содержимым
Предусловие: Plist указывает на список
Постусловие: список инициализирован*/
void InitList (List ** plist);
/*Операция: определение является ли список пустым
Предусловие: Plist указывает на список
Постусловие: функция возвращает true если список пуст и false в противном случае*/
bool ListIsEmpty (List ** plist);
/*Операция: определение является ли список полным
Предусловие: Plist указывает на список
Постусловие: функция возвращает true если список полон и false в противном случае*/
bool ListIsFull (void);
/*Операция: посчет количества узлов в списке
Предусловие: Plist указывает на список
Постусловие: функция возвращает количество элементов в списке*/
unsigned int ListItemCount (List ** plist);
/*Операция: добавление элемента в начало списка
Предусловие: Plist указывает на список, pi указывает на добавляемый элемент
Постусловие: функция возвращает true если вставка удалась и false в противном случае*/
bool AddToHead (Item * pi, List ** plist);
/*Операция: добавление элемента в конец списка
Предусловие: Plist указывает на список, pi указывает на добавляемый элемент
Постусловие: функция возвращает true если вставка удалась и false в противном случае*/
bool AddToTail (Item * pi, List ** plist);
/*Операция: удаление элемента из начала списка
Предусловие: Plist указывает на список
Постусловие: функция удаляет элемент и возвращает его*/
Item DeleteFromHead (List ** plist);
/*Операция: удаление элемента с конца списка
Предусловие: Plist указывает на список
Постусловие: функция удаляет элемент и возвращает его*/
Item DeleteFromTail (List ** plist);
/*Операция: удаление списка, очищение выделенной памяти
Предусловие: Plist указывает на список
Постусловие: функция удаляет список и очищает выделенную память*/
void DeleteList (List ** plist);
/*Операция: функция применяет передаваему функцию к каждому элементу списка
Предусловие: Plist указывает на список, pfun указывает на применяемую функцию, status - индикатор
Постусловие: При нулевом значении аргумента status - функция применяет передаваемую функцию к кажому элементу списка
от начала до конца, при ненулевом значении от конца до начала*/
void Traverse (List ** plist, void (*pfun)(Item item), int status);

#endif